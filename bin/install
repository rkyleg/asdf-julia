#!/usr/bin/env bash

# https://s3.amazonaws.com/julialang/bin/osx/x64/0.5/julia-0.5.0-osx10.7+.dmg

set -e

function get_arch_short {
  local arch_long=$(uname -m)

  case "$arch_long" in
    "armv7l" | "aarch64")
      local arch_short=$arch_long
      ;;
    "i686")
      local arch_short="x86"
      ;;
    "x86_64")
      local arch_short="x64"
      ;;
  esac

  echo $arch_short
}

function get_os {
  local uname_str="$(uname)"

  case $uname_str in
    "Darwin")
      local os="mac"
      ;;
    *)
      local os="$(echo $uname_str | tr '[:upper:]' '[:lower:]')"
  esac

  echo $os
}

function get_file_extension {

  case "$(get_os)" in
    "mac")
      local extension="dmg"
      ;;
    *)
      local extension="tar.gz"
      ;;
  esac

  echo $extension
}

function get_url_from_version {
  local version=$1

  local version_trim=${version%.*}
  local arch_long=$(uname -m)
  local os=$(get_os)
  local extension=$(get_file_extension)

  # TODO: maybe refactor this into function
  case os in
    "mac")
      local version_postfix="mac64"
      ;;
    *)
      local version_postfix="$os-$arch_long"
      ;;
  esac

  echo "https://julialang-s3.julialang.org/bin/$os/$arch_short/$version_trim/julia-$version-$version_postfix.$extension"
}

function get_url_from_nightly {
  local os=$(get_os)
  local arch_short=$(get_arch_short)
  local extension=$(get_file_extension)

  case "$(get_os)" in
    "mac")
      local version_postfix="mac64"
      ;;
    "linux")
      case "$(uname -m)" in
        "aarch64")
          local version_postfix="linuxaarch64"
          ;;
        "i686")
          local version_postfix="linux32"
          ;;
        "x86_64")
          local version_postfix="linux64"
          ;;
        *)
          echo "Error: unrecognized os or arch." >&2
          exit 1
          ;;
      esac
      ;;
    esac

  local url="https://julialangnightlies-s3.julialang.org/bin/$os/$arch_short/julia-latest-$version_postfix.$extension"
  echo $url
}

function download_binary_archive {
  local version=$1

  local tmp_download_dir="$(mktemp -d -t asdf-julia.XXX)"
  local tmp_download_file="$tmp_download_dir/julia.archive"

  if [[ $version == "nightly" ]]; then
    local url="$(get_url_from_nightly)"
  else
    local url="$(get_url_from_version $version)"
  fi

  curl -L "$url" > "$tmp_download_file"

  echo $tmp_download_file
}

function install_julia {
    local install_type=$1
    local version=$2
    local install_path=$3

    tmp_download_file="$(download_binary_archive $version)"
    tmp_download_dir="$(dirname $tmp_download_file)"

    if [ "$(uname)" == "Darwin" ]; then
      local volume_path=$(
      hdiutil mount "$tmp_download_file" `# mount the dmg`\
        | grep Volume `# find the volume row in the output`\
        | egrep -o '/Volumes[^\n]+' `# store the volume's path`\
      )

      local source_path=$(find $volume_path -type d -print 2> /dev/null `# find all directories in the new volume, redirect the errors so they don't interfere with the grep` \
        | grep 'Contents/Resources/julia$' `#find the julia directory` \
        | head -n 1
      )

      cp -R $source_path $install_path
      hdiutil unmount $volume_path
    else
      local untar_list="$(tar -xvf "$tmp_download_file" -C $tmp_download_dir)"
      local untar_dir="$tmp_download_dir/$(echo $untar_list | cut -f1 -d"/" | head -n 1)"
      mv $untar_dir/* $install_path/
    fi
}
install_julia $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
